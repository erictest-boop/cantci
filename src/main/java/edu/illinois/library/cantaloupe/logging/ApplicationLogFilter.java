package edu.illinois.library.cantaloupe.logging;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.filter.Filter;
import ch.qos.logback.core.spi.FilterReply;

/**
 * Used in logback.xml.
 */
public class ApplicationLogFilter extends Filter<ILoggingEvent> {

    public FilterReply decide(ILoggingEvent event) {
        // PDFBox log messages are unfortunately not calibrated very well.
        // There are lots of warnings for trivial things that nobody but a
        // PDF enthusiast would care about.
        // Would be better to reduce their level, but we can't here...
        if (event.getLoggerName().startsWith("org.apache.pdfbox") &&
                event.getLevel().equals(Level.WARN)) {
            return FilterReply.DENY;
        }
        // These are also generated by PDFBox.
        else if ("org.apache.fontbox.ttf.GlyphRenderer".equals(event.getLoggerName()) &&
                Level.TRACE.isGreaterOrEqual(event.getLevel())) {
            return FilterReply.DENY;
        }
        // Reject Jetty debug messages, even though they might be useful, as
        // they totally overwhelm the debug log.
        else if (event.getLoggerName().startsWith("org.eclipse.jetty") &&
                Level.DEBUG.isGreaterOrEqual(event.getLevel())) {
            return FilterReply.DENY;
        }
        // Reject Jetty static content access messages.
        else if (org.eclipse.jetty.server.ResourceService.class.getName().equals(event.getLoggerName()) &&
                Level.INFO.isGreaterOrEqual(event.getLevel())) {
            return FilterReply.DENY;
        }
        // Reject Jetty access log messages. AccessLogFilter will accept them
        // instead.
        else if (org.eclipse.jetty.server.RequestLog.class.getName().equals(event.getLoggerName())) {
            return FilterReply.DENY;
        }
        // Reject Velocity debug messages.
        else if (event.getLoggerName().startsWith("org.apache.velocity") &&
                Level.DEBUG.isGreaterOrEqual(event.getLevel())) {
            return FilterReply.DENY;
        }
        // The Amazon S3 client wraps an Apache HTTP client which is extremely
        // verbose.
        else if ("org.apache.http.wire".equals(event.getLoggerName()) &&
                Level.DEBUG.isGreaterOrEqual(event.getLevel())) {
            return FilterReply.DENY;
        }
        return FilterReply.NEUTRAL;
    }

}
